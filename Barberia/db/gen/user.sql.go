// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (nombre, telefono, email)
VALUES (?, ?, ?)
`

type CreateUserParams struct {
	Nombre   string
	Telefono string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Nombre, arg.Telefono, arg.Email)
	return err
}

const listUsers = `-- name: ListUsers :many
SELECT id, nombre, telefono, email
FROM users
`

type ListUsersRow struct {
	ID       uint64
	Nombre   string
	Telefono string
	Email    string
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Nombre,
			&i.Telefono,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
