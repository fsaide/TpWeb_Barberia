// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createBarbero = `-- name: CreateBarbero :one

INSERT INTO Barbero (nombre, especialidad)
VALUES ($1, $2)
RETURNING id_barbero, nombre, especialidad
`

type CreateBarberoParams struct {
	Nombre       string         `json:"nombre"`
	Especialidad sql.NullString `json:"especialidad"`
}

// CRUD para Barbero
func (q *Queries) CreateBarbero(ctx context.Context, arg CreateBarberoParams) (Barbero, error) {
	row := q.db.QueryRowContext(ctx, createBarbero, arg.Nombre, arg.Especialidad)
	var i Barbero
	err := row.Scan(&i.IDBarbero, &i.Nombre, &i.Especialidad)
	return i, err
}

const createCliente = `-- name: CreateCliente :one

INSERT INTO Cliente (nombre, apellido, telefono)
VALUES ($1, $2, $3)
RETURNING id_cliente, nombre, apellido, telefono
`

type CreateClienteParams struct {
	Nombre   string         `json:"nombre"`
	Apellido string         `json:"apellido"`
	Telefono sql.NullString `json:"telefono"`
}

// CRUD para Cliente
func (q *Queries) CreateCliente(ctx context.Context, arg CreateClienteParams) (Cliente, error) {
	row := q.db.QueryRowContext(ctx, createCliente, arg.Nombre, arg.Apellido, arg.Telefono)
	var i Cliente
	err := row.Scan(
		&i.IDCliente,
		&i.Nombre,
		&i.Apellido,
		&i.Telefono,
	)
	return i, err
}

const createTurno = `-- name: CreateTurno :one

INSERT INTO Turno (id_cliente, id_barbero, fechaHora, servicio, observaciones)
VALUES ($1, $2, $3, $4, $5)
RETURNING id_turno, id_cliente, id_barbero, fechahora, servicio, observaciones
`

type CreateTurnoParams struct {
	IDCliente     int32          `json:"id_cliente"`
	IDBarbero     int32          `json:"id_barbero"`
	Fechahora     time.Time      `json:"fechahora"`
	Servicio      string         `json:"servicio"`
	Observaciones sql.NullString `json:"observaciones"`
}

// CRUD para Turno
func (q *Queries) CreateTurno(ctx context.Context, arg CreateTurnoParams) (Turno, error) {
	row := q.db.QueryRowContext(ctx, createTurno,
		arg.IDCliente,
		arg.IDBarbero,
		arg.Fechahora,
		arg.Servicio,
		arg.Observaciones,
	)
	var i Turno
	err := row.Scan(
		&i.IDTurno,
		&i.IDCliente,
		&i.IDBarbero,
		&i.Fechahora,
		&i.Servicio,
		&i.Observaciones,
	)
	return i, err
}

const deleteBarbero = `-- name: DeleteBarbero :exec
DELETE FROM Barbero
WHERE id_barbero = $1
`

func (q *Queries) DeleteBarbero(ctx context.Context, idBarbero int32) error {
	_, err := q.db.ExecContext(ctx, deleteBarbero, idBarbero)
	return err
}

const deleteCliente = `-- name: DeleteCliente :exec
DELETE FROM Cliente
WHERE id_cliente = $1
`

func (q *Queries) DeleteCliente(ctx context.Context, idCliente int32) error {
	_, err := q.db.ExecContext(ctx, deleteCliente, idCliente)
	return err
}

const deleteTurno = `-- name: DeleteTurno :exec
DELETE FROM Turno
WHERE id_turno = $1
`

func (q *Queries) DeleteTurno(ctx context.Context, idTurno int32) error {
	_, err := q.db.ExecContext(ctx, deleteTurno, idTurno)
	return err
}

const getBarberoByID = `-- name: GetBarberoByID :one
SELECT id_barbero, nombre, especialidad FROM Barbero
WHERE id_barbero = $1
`

func (q *Queries) GetBarberoByID(ctx context.Context, idBarbero int32) (Barbero, error) {
	row := q.db.QueryRowContext(ctx, getBarberoByID, idBarbero)
	var i Barbero
	err := row.Scan(&i.IDBarbero, &i.Nombre, &i.Especialidad)
	return i, err
}

const getClienteByID = `-- name: GetClienteByID :one
SELECT id_cliente, nombre, apellido, telefono FROM Cliente
WHERE id_cliente = $1
`

func (q *Queries) GetClienteByID(ctx context.Context, idCliente int32) (Cliente, error) {
	row := q.db.QueryRowContext(ctx, getClienteByID, idCliente)
	var i Cliente
	err := row.Scan(
		&i.IDCliente,
		&i.Nombre,
		&i.Apellido,
		&i.Telefono,
	)
	return i, err
}

const getTurnoByID = `-- name: GetTurnoByID :one
SELECT id_turno, id_cliente, id_barbero, fechahora, servicio, observaciones FROM Turno
WHERE id_turno = $1
`

func (q *Queries) GetTurnoByID(ctx context.Context, idTurno int32) (Turno, error) {
	row := q.db.QueryRowContext(ctx, getTurnoByID, idTurno)
	var i Turno
	err := row.Scan(
		&i.IDTurno,
		&i.IDCliente,
		&i.IDBarbero,
		&i.Fechahora,
		&i.Servicio,
		&i.Observaciones,
	)
	return i, err
}

const listBarberos = `-- name: ListBarberos :many
SELECT id_barbero, nombre, especialidad FROM Barbero
ORDER BY id_barbero
`

func (q *Queries) ListBarberos(ctx context.Context) ([]Barbero, error) {
	rows, err := q.db.QueryContext(ctx, listBarberos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Barbero
	for rows.Next() {
		var i Barbero
		if err := rows.Scan(&i.IDBarbero, &i.Nombre, &i.Especialidad); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientes = `-- name: ListClientes :many
SELECT id_cliente, nombre, apellido, telefono FROM Cliente
ORDER BY id_cliente
`

func (q *Queries) ListClientes(ctx context.Context) ([]Cliente, error) {
	rows, err := q.db.QueryContext(ctx, listClientes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cliente
	for rows.Next() {
		var i Cliente
		if err := rows.Scan(
			&i.IDCliente,
			&i.Nombre,
			&i.Apellido,
			&i.Telefono,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTurnos = `-- name: ListTurnos :many
SELECT id_turno, id_cliente, id_barbero, fechahora, servicio, observaciones FROM Turno
ORDER BY id_turno
`

func (q *Queries) ListTurnos(ctx context.Context) ([]Turno, error) {
	rows, err := q.db.QueryContext(ctx, listTurnos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Turno
	for rows.Next() {
		var i Turno
		if err := rows.Scan(
			&i.IDTurno,
			&i.IDCliente,
			&i.IDBarbero,
			&i.Fechahora,
			&i.Servicio,
			&i.Observaciones,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBarbero = `-- name: UpdateBarbero :one
UPDATE Barbero
SET nombre = $2,
    especialidad = $3
WHERE id_barbero = $1
RETURNING id_barbero, nombre, especialidad
`

type UpdateBarberoParams struct {
	IDBarbero    int32          `json:"id_barbero"`
	Nombre       string         `json:"nombre"`
	Especialidad sql.NullString `json:"especialidad"`
}

func (q *Queries) UpdateBarbero(ctx context.Context, arg UpdateBarberoParams) (Barbero, error) {
	row := q.db.QueryRowContext(ctx, updateBarbero, arg.IDBarbero, arg.Nombre, arg.Especialidad)
	var i Barbero
	err := row.Scan(&i.IDBarbero, &i.Nombre, &i.Especialidad)
	return i, err
}

const updateCliente = `-- name: UpdateCliente :one
UPDATE Cliente
SET nombre = $2,
    apellido = $3,
    telefono = $4
WHERE id_cliente = $1
RETURNING id_cliente, nombre, apellido, telefono
`

type UpdateClienteParams struct {
	IDCliente int32          `json:"id_cliente"`
	Nombre    string         `json:"nombre"`
	Apellido  string         `json:"apellido"`
	Telefono  sql.NullString `json:"telefono"`
}

func (q *Queries) UpdateCliente(ctx context.Context, arg UpdateClienteParams) (Cliente, error) {
	row := q.db.QueryRowContext(ctx, updateCliente,
		arg.IDCliente,
		arg.Nombre,
		arg.Apellido,
		arg.Telefono,
	)
	var i Cliente
	err := row.Scan(
		&i.IDCliente,
		&i.Nombre,
		&i.Apellido,
		&i.Telefono,
	)
	return i, err
}

const updateTurno = `-- name: UpdateTurno :one
UPDATE Turno
SET id_cliente = $2,
    id_barbero = $3,
    fechaHora = $4,
    servicio = $5,
    observaciones = $6
WHERE id_turno = $1
RETURNING id_turno, id_cliente, id_barbero, fechahora, servicio, observaciones
`

type UpdateTurnoParams struct {
	IDTurno       int32          `json:"id_turno"`
	IDCliente     int32          `json:"id_cliente"`
	IDBarbero     int32          `json:"id_barbero"`
	Fechahora     time.Time      `json:"fechahora"`
	Servicio      string         `json:"servicio"`
	Observaciones sql.NullString `json:"observaciones"`
}

func (q *Queries) UpdateTurno(ctx context.Context, arg UpdateTurnoParams) (Turno, error) {
	row := q.db.QueryRowContext(ctx, updateTurno,
		arg.IDTurno,
		arg.IDCliente,
		arg.IDBarbero,
		arg.Fechahora,
		arg.Servicio,
		arg.Observaciones,
	)
	var i Turno
	err := row.Scan(
		&i.IDTurno,
		&i.IDCliente,
		&i.IDBarbero,
		&i.Fechahora,
		&i.Servicio,
		&i.Observaciones,
	)
	return i, err
}
